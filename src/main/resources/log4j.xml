<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//log4j/log4j Configuration//EN" "log4j.dtd">
<log4j:configuration>

    <!-- ========================== 自定义输出格式说明================================ -->
    <!-- %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL -->
    <!-- #%r 输出自应用启动到输出该log信息耗费的毫秒数  -->
    <!-- #%c 输出所属的类目，通常就是所在类的全名 -->
    <!-- #%t 输出产生该日志事件的线程名 -->
    <!-- #%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n” -->
    <!-- #%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921  -->
    <!-- #%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)  -->
    <!-- ========================================================================== -->

    <!-- ========================== 输出方式说明================================ -->
    <!-- Log4j提供的appender有以下几种:  -->
    <!-- org.apache.log4j.ConsoleAppender(控制台),  -->
    <!-- org.apache.log4j.FileAppender(文件),  -->
    <!-- org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件), -->
    <!-- org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件),  -->
    <!-- org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方)   -->

    <!--输出到CONSOLE控制台-->
    <appender class="org.apache.log4j.ConsoleAppender" name="CONSOLE">
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value = "[%-d{YYYY-MM-dd HH:mm:ss}] %p [%t] %c{1}.%M(%L) | %m%n"/>
        </layout>

        <!--限制输出级别-->
        <!--<filter class="org.apache.log4j.varia.LevelRangeFilter">-->
            <!--<param name="LevelMax" value="ERROR"/>-->
            <!--<param name="LevelMin" value="TRACE"/>-->
        <!--</filter>-->
    </appender>

    <!--输出到文件：自动ROLL-->
    <appender class="org.apache.log4j.RollingFileAppender" name="ROLLFILE">
        <param name="File" value="E:/rolllog.log"/>
        <param name="MaxFileSize" value="10000KB"/>
        <param name="MaxBackupIndex" value="100"/>
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%-d{YYYY-MM-dd HH:mm:ss}] %p [%t] %c{1}.%M(%L) | %m%n"/>
        </layout>
    </appender>

    <!--输出到文件-->
    <appender name="FILE" class="org.apache.log4j.FileAppender">
        <param name="File" value="E:/log.log"/>
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern"
                   value="%d - %c -%-4r [%t] %-5p %x - %m%n" />
        </layout>
    </appender>

    <!--&lt;!&ndash;通过<logger></logger>的定义可以将各个包中的类日志输出到不同的日志文件中&ndash;&gt;-->
    <!--<logger name="com.litt2.log4j" additivity="false">-->
        <!--<level value="WARN" />-->
        <!--<appender-ref ref="CONSOLE" />-->
    <!--</logger>-->

    <!--通过<logger></logger>的定义可以将各个包中的类日志输出到不同的日志文件中-->
    <!--优先级高于:默认的Root（会覆盖root）-->
    <!--logger和category如果存在同样位置的输出会报错:这个并存关系不是很理解，不建议同时使用,增加理解难度-->
    <logger name="com.TestMain.Test" additivity="false">
        <level value="DEBUG" />
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="FILE"/>
    </logger>

    <logger name="com" additivity="false">
        <level value="ERROR" />
        <appender-ref ref="CONSOLE" />
    </logger>

    <!--通过<category></category>的定义可以将各个包中的类日志输出到不同的日志文件中-->
    <!--category 会和root并存-->
    <!--logger和category如果存在同样位置的输出会报错:这个并存关系不是很理解，不建议同时使用,增加理解难度-->
    <!--<category name="Test">-->
        <!--<level value="DEBUG" />-->
        <!--<appender-ref ref="CONSOLE" />-->
        <!--&lt;!&ndash;<appender-ref ref="MAIL" />&ndash;&gt;-->
        <!--<appender-ref ref="FILE"/>-->
    <!--</category>-->

    <!--默认输出到的地方-->
    <root>
        <priority value="WARN"/>
        <!--<appender-ref ref="CONSOLE"/>-->
        <appender-ref ref="FILE"/>
        <appender-ref ref="ROLLFILE"/>
    </root>
</log4j:configuration>